Index: Digital_Dashboard/Dashboard/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect\r\nfrom django.contrib.auth import login, authenticate\r\nfrom django.core import serializers\r\nfrom django.http import JsonResponse\r\nimport json\r\nimport requests\r\nimport collections, functools, operator\r\nfrom django.http import HttpResponse, HttpResponseRedirect\r\nfrom django.contrib.auth.forms import UserCreationForm\r\nfrom .forms import UserForm, ProfileForm\r\n\r\nfrom .models import Districts\r\nfrom .models import ProductsInfo\r\nfrom .models import EngagementInfo\r\nfrom .forms import DistrictForm\r\nfrom .forms import FilterForm\r\nfrom .models import UserProfile\r\nfrom .models import StudentFormInfo\r\nfrom .models import RatingInfo\r\nfrom .models import CountyConnectionInfo\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom rest_framework.decorators import api_view\r\nfrom django.http import JsonResponse\r\nfrom django.views.decorators.csrf import csrf_exempt\r\nfrom random import randint\r\nfrom collections import defaultdict\r\nfrom operator import itemgetter\r\n\r\nnames_of_places = []\r\nlibrary_places = []\r\nrating_star_list = []\r\n\r\ndef create_user_for_signup(request):\r\n\r\n    if(request.method == 'POST'):\r\n        form = UserForm(request.POST)\r\n        profile_form = ProfileForm(request.POST)\r\n\r\n        if(form.is_valid() and profile_form.is_valid()):\r\n            \r\n            user = form.save()\r\n            profile = profile_form.save(commit=False)\r\n            profile.user = user\r\n            profile.save()\r\n\r\n            username = form.cleaned_data.get('username')\r\n            raw_password = form.cleaned_data.get('password1')\r\n\r\n            print(\"The username is\",username)\r\n            print(\"The password is\",raw_password)\r\n            user = authenticate(username=username, password=raw_password)\r\n            login(request, user)\r\n\r\n\r\n            return HttpResponseRedirect('/dashboard/home',{'form' : form})\r\n\r\n        else:\r\n            # return HttpResponseRedirect('/dashboard/signup',{'form' : form})\r\n            print(form.errors)\r\n        \r\n    else:\r\n        form = UserForm()\r\n        profile_form = ProfileForm()\r\n    return render(request, 'sign-up.html', {'form' : form, 'profile_form': profile_form})\r\n\r\ndef stat_collector_page(request):\r\n    student_province = \"\"\r\n    school_grade = 0\r\n    test_score = 0\r\n    attendance_percentage = 0\r\n    student_device = \"\"\r\n    workstatus = \"\"\r\n    parent_salary = \"\"\r\n    wifi_present = \"\"\r\n    wifi_company = \"\"\r\n    wifi_speed = \"\"\r\n\r\n    if (request.method == 'POST'):\r\n        student_province =  request.POST.get('province')\r\n        school_grade = int(request.POST.get('grade'))\r\n        if (request.POST.get('testscore')):\r\n            test_score = int(request.POST.get('testscore'))\r\n        attendance_percentage = int(request.POST.get('attendance'))\r\n        student_device = (request.POST.get('device'))\r\n        workstatus = request.POST.get('studentstatus')\r\n        parent_salary = request.POST.get('parentsstatus')\r\n        wifi_present = request.POST.get('wifi')\r\n\r\n        if (request.POST.get('wificompany')):\r\n            wifi_company = request.POST.get('wificompany')\r\n        \r\n        if (request.POST.get('wifispeed')):\r\n            wifi_speed = request.POST.get('wifispeed')\r\n        print(\"student_province is\", student_province)\r\n        print(\"school_grade is\", school_grade)\r\n        print(\"test_score is\", test_score)\r\n        print(\"attendance_percentage is\", attendance_percentage)\r\n        print(\"student_devices is\", student_device)\r\n        print(\"workstatus is\", workstatus)\r\n        print(\"parent_salary is\", parent_salary)\r\n        print(\"wifi_present is\", wifi_present)\r\n        print(\"wifi_company is\", wifi_company)\r\n        print(\"wifi_speed is\", wifi_speed)\r\n\r\n    if (student_province != \"\" and school_grade != \"\" and attendance_percentage != \"\" ):\r\n        StudentFormInfo.objects.create(province=student_province,schoolgrade=school_grade, testscore=test_score,attendancepercentage=attendance_percentage,device=student_device,studentworkstatus=workstatus,parentssalary=parent_salary,wifi=wifi_present, wificompany=wifi_company,wifispeed=wifi_speed)  \r\n    return render(request, 'informationcollector.html')\r\n\r\ndef show_wifi_hotspots_information(request):\r\n    input_address = ''\r\n    names_of_places.clear()\r\n    library_places.clear();\r\n    in_latitude = ''\r\n    in_longitude = ''\r\n    userRating = ''\r\n    qualityOfWifi = ''\r\n    placeName  = ''\r\n    placeAddress = ''\r\n\r\n    if (request.method == 'POST' and request.POST.get('ratingRange') and request.POST.get('wifiquality')):\r\n        userRating = int(request.POST.get('ratingRange'))\r\n        qualityOfWifi = int(request.POST.get('wifiquality'))\r\n        placeName = request.POST.get('placename')\r\n        placeAddress = request.POST.get('placeaddress')\r\n\r\n        RatingInfo.objects.create(rating=userRating,wifiquality=qualityOfWifi,name=placeName, placeaddress=placeAddress)\r\n\r\n\r\n\r\n    print('everything is',userRating,qualityOfWifi,placeName,placeAddress)\r\n    show_wifi_hotspots_page(request, \"cafe\");\r\n    show_wifi_hotspots_page(request, \"library\");\r\n\r\n    if (request.method == 'POST'):\r\n        input_address = request.POST.get('address')\r\n        in_latitude = request.POST.get('cityLat')\r\n        in_longitude = request.POST.get('cityLng')\r\n    print(\"The address is\", input_address)\r\n\r\n    return render(request, 'wifihotspots.html', {'places' : names_of_places, 'libraries': library_places, 'address': input_address, 'lat': in_latitude, 'long': in_longitude})\r\n\r\ndef show_wifi_hotspots_page(request, type):\r\n    latitude = ''\r\n    longitude = ''\r\n    payload={}\r\n    headers = {}\r\n    input_address = 'empty'\r\n    rating = 0\r\n    if request.method == 'POST' and request.POST.get('cityLat'):\r\n        latitude = request.POST.get('cityLat')\r\n        longitude = request.POST.get('cityLng')\r\n        opening_hours = \"\"\r\n        open_period = \"\"\r\n        random_number = 0;\r\n        url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=\"+latitude+\"%2C\"+longitude+\"&radius=10000&type=\"+type+\"&key=AIzaSyDxQOJK5g7J9P6z9xXHq2hEt7zQMRxlspg\";\r\n        response = requests.request(\"GET\", url, headers=headers, data=payload)\r\n        json_data = json.loads(response.text)\r\n        json_results = json_data[\"results\"];\r\n\r\n        ratingInfo = RatingInfo.objects.all()\r\n        for i in range(len(json_results)):\r\n            if (json_results[i].get(\"opening_hours\") and json_results[i].get(\"opening_hours\").get(\"open_now\")):\r\n                opening_hours = json_results[i].get(\"opening_hours\").get(\"open_now\")\r\n            else:\r\n                opening_hours = \"Not listed\"\r\n            random_number = randint(10000, 99999); \r\n           \r\n            for items in ratingInfo:\r\n                if(items.name == json_results[i][\"name\"] and items.placeaddress in json_results[i][\"vicinity\"]):\r\n                    print('isequal', items.placeaddress,json_results[i][\"vicinity\"])\r\n                    rating = items.rating\r\n                     \r\n                    if type == 'cafe':                     \r\n                        names_of_places.append({'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': rating, 'id': random_number})\r\n                        if ({'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': \"No rating found\", 'id': random_number} in names_of_places):\r\n                            names_of_places.remove({'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': \"No rating found\", 'id': random_number})\r\n                    elif (type == 'library'):\r\n                        library_places.append({'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': rating, 'id': random_number})\r\n                        if ({'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': \"No rating found\", 'id': random_number} in library_places):\r\n                            library_places.remove({'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': \"No rating found\", 'id': random_number})\r\n\r\n                elif (items.name != json_results[i][\"name\"] or items.placeaddress not in json_results[i][\"vicinity\"]):\r\n                    if type == 'cafe' and {'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': \"No rating found\", 'id': random_number} not in names_of_places and {'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': rating, 'id': random_number} not in names_of_places:                     \r\n                        names_of_places.append({'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': \"No rating found\", 'id': random_number})\r\n                    elif type == 'library' and {'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': \"No rating found\", 'id': random_number} not in library_places and {'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': rating, 'id': random_number} not in library_places:\r\n                        library_places.append({'name':json_results[i][\"name\"], 'vicinity': json_results[i][\"vicinity\"], 'isOpen': opening_hours, 'rating': \"No rating found\", 'id': random_number})\r\n\r\n\r\ndef show_speed_test_page(request):\r\n    return render(request, 'speed-test.html')  \r\n\r\ndef show_user_login__page(request):\r\n    return render(request, 'login.html')\r\n\r\n\r\ndef show_join_us_page(request):\r\n    return render(request, 'joinustoday.html')\r\n\r\n\r\ndef show_sign_up_page(request):\r\n    return render(request, 'sign-up.html')\r\n\r\n# @api_view(['POST'])\r\n# @csrf_exempt\r\n# def coordinates_output(request):\r\n#     print(\"The latitude is\",request.data['%22lat22'])\r\n\r\ndef generate_product_info(request):\r\n    return render(request, 'main.html')\r\n\r\ndef create_district_graph():\r\n    # form = DistrictForm()\r\n    form = FilterForm\r\n    return form\r\n\r\n\r\ndef percentage_access_in_state(state):\r\n    state_list = Districts.objects.filter(state=state)\r\n    district_list = []\r\n    county_connection = []\r\n    for x in state_list:\r\n        # print(\"The district {}\".format(state),x.county_connection)\r\n        county_connection.append(x.county_connection)\r\n        district_list.append(x.district_id)\r\n        # print(\"The county connection\",county_connection)\r\n        # print(\"The district_id\", district_list)\r\n\r\n    return county_connection,district_list\r\n\r\n\r\ndef expenditure_per_pupil_in_different_states():\r\n    avg_expenditure_for_states = []\r\n    Utah = []\r\n    Illi = []\r\n    Wisco = []\r\n    mean_perc = []\r\n    north = []\r\n    miss = []\r\n    wash = []\r\n    connect = []\r\n    mass = []\r\n    newyork = []\r\n    indiana = []\r\n    vir = []\r\n    ohio = []\r\n    jersey = []\r\n    cal = []\r\n    dis = []\r\n    ari = []\r\n    tex = []\r\n    states = ['Utah', 'Illinois', 'Wisconsin', 'North Carolina', 'Missouri', 'Washington', 'New York', 'Indiana', 'Virginia', 'New Jersey','Texas']\r\n\r\n    o = Districts.objects.all()\r\n\r\n    for item in o:\r\n        if item.state == 'Utah':\r\n            Utah.append(item.pp_total_raw)\r\n        elif item.state == 'Illinois':\r\n            Illi.append(item.pp_total_raw)\r\n        elif item.state == 'Wisconsin':\r\n            Wisco.append(item.pp_total_raw)\r\n        elif item.state == 'North Carolina':\r\n            north.append(item.pp_total_raw)\r\n        elif item.state == 'Missouri':\r\n            miss.append(item.pp_total_raw)\r\n        elif item.state == 'Washington':\r\n            wash.append(item.pp_total_raw)\r\n        # elif item.state == 'Connecticut':\r\n        #     connect.append(item.pp_total_raw)\r\n        # elif item.state == 'Massachusetts':\r\n        #     mass.append(item.pp_total_raw)\r\n        elif item.state == 'New York':\r\n            newyork.append(item.pp_total_raw)\r\n        elif item.state == 'Indiana':\r\n            indiana.append(item.pp_total_raw)\r\n        elif item.state == 'Virginia':\r\n            vir.append(item.pp_total_raw)\r\n        # elif item.state == 'Ohio':\r\n        #     ohio.append(item.pp_total_raw)\r\n        elif item.state == 'New Jersey':\r\n            jersey.append(item.pp_total_raw)\r\n        # elif item.state == 'California':\r\n        #     cal.append(item.pp_total_raw)\r\n        # elif item.state == 'District Of Columbia':\r\n            dis.append(item.pp_total_raw)\r\n        # elif item.state == 'Arizona':\r\n        #     ari.append(item.pp_total_raw)\r\n        elif item.state == 'Texas':\r\n            tex.append(item.pp_total_raw)\r\n\r\n    if len(Utah) > 0:\r\n        avg_expenditure_for_states.append(avg(Utah))\r\n    else:\r\n        avg_expenditure_for_states.append(0)\r\n    if len(Illi) > 0:\r\n        avg_expenditure_for_states.append(avg(Illi))\r\n    else:\r\n        avg_expenditure_for_states.append(0)\r\n    if len(Wisco) > 0:\r\n        avg_expenditure_for_states.append(avg(Wisco))\r\n    else:\r\n        avg_expenditure_for_states.append(0)\r\n    if len(north) > 0:\r\n        avg_expenditure_for_states.append(avg(north))\r\n    else:\r\n        avg_expenditure_for_states.append(0)\r\n    if len(miss) > 0:\r\n        avg_expenditure_for_states.append(avg(miss))\r\n    else:\r\n        avg_expenditure_for_states.append(0)\r\n    if len(wash) > 0:\r\n        avg_expenditure_for_states.append(avg(wash))\r\n    else:\r\n        avg_expenditure_for_states.append(0)\r\n    # # if len(connect) > 0:\r\n    # #     avg_expenditure_for_states.append(avg(connect))\r\n    # else:\r\n    #     avg_expenditure_for_states.append(0)\r\n    # if len(mass) > 0:\r\n    #     avg_expenditure_for_states.append(avg(mass))\r\n    # else:\r\n    #     avg_expenditure_for_states.append(0)\r\n    if len(newyork) > 0:\r\n        avg_expenditure_for_states.append(avg(newyork))\r\n    else:\r\n        avg_expenditure_for_states.append(0)\r\n    if len(indiana) > 0:\r\n        avg_expenditure_for_states.append(avg(indiana))\r\n    else:\r\n        avg_expenditure_for_states.append(0)\r\n    if len(vir) > 0:\r\n        avg_expenditure_for_states.append(avg(vir))\r\n    else:\r\n        avg_expenditure_for_states.append(0)\r\n    # if len(ohio) > 0:\r\n    #     avg_expenditure_for_states.append(avg(ohio))\r\n    # else:\r\n    #     avg_expenditure_for_states.append(0)\r\n    if len(jersey) > 0:\r\n        avg_expenditure_for_states.append(avg(jersey))\r\n    else:\r\n        avg_expenditure_for_states.append(0)\r\n    # if len(cal) > 0:\r\n    #     avg_expenditure_for_states.append(avg(cal))\r\n    # else:\r\n    #     avg_expenditure_for_states.append(0)\r\n    # if len(dis) > 0:\r\n    #     avg_expenditure_for_states.append(avg(dis))\r\n    # else:\r\n    #     avg_expenditure_for_states.append(0)\r\n    # if len(ari) > 0:\r\n    #     avg_expenditure_for_states.append(avg(ari))\r\n    # else:\r\n    #     avg_expenditure_for_states.append(0)\r\n    if len(tex) > 0:\r\n        avg_expenditure_for_states.append(avg(tex))\r\n    else:\r\n        avg_expenditure_for_states.append(0)\r\n\r\n    # final_states_list = json.dumps(states)\r\n    # final_expenditure_list = json.dumps(avg_expenditure_for_states)    #commenting lines 212 and 213 for now\r\n    return states,avg_expenditure_for_states\r\n\r\n\r\ndef productEngagement():\r\n    obj = EngagementInfo.objects.all().order_by('-engagement_index')\r\n\r\n    for x in obj:\r\n        print(\"I am are\",x.lp_id, x.engagement_index)\r\n    products = ProductsInfo.objects.all()\r\n    products_data = []\r\n    consumer_products = []\r\n    unique_products = []\r\n    products_array = []\r\n    single_products_array = []\r\n    single_average_engagement_array = []\r\n\r\n    \r\n    for x in obj:\r\n        for product in products:\r\n            if x.lp_id == product.lpid:\r\n                products_data.append({'name': product.product_name, 'engagement': x.engagement_index})\r\n\r\n    print('product data is', products_data)\r\n    for dic in products_data:\r\n        for key in (dic.keys()):\r\n            if key == 'name':\r\n                consumer_products.append(dic[key])\r\n    unique_products = set(consumer_products)\r\n    print(unique_products)\r\n\r\n    for p in unique_products: \r\n        average = 0\r\n        count = 0   \r\n        for dict in products_data:\r\n            if dict['name'] == p:\r\n                average = average + dict['engagement']\r\n                print('GS', p, average)\r\n                count = count + 1\r\n        products_array.append({'name': p, 'avg': average/count})\r\n\r\n\r\n    print(products_array)\r\n\r\n    top10products = sorted(products_array, key=itemgetter('avg'), reverse=True)[0:10]\r\n\r\n    least10products = sorted(products_array, key=itemgetter('avg'), reverse=True)[-20:]\r\n    print(\"least 10 is \", least10products)\r\n\r\n    for item in top10products:\r\n        for key, value in item.items():\r\n            if key == 'name':\r\n               single_products_array.append(value)\r\n            elif key == 'avg':\r\n                 single_average_engagement_array.append(value)\r\n\r\n\r\n    return top10products, least10products, single_products_array, single_average_engagement_array\r\n\r\n\r\n\r\ndef totalNumberOfSchoolDistricts():\r\n    district_ids = []\r\n    states = []\r\n    obj = Districts.objects.all()\r\n    for item in obj:\r\n        if item.district_id and item.district_id not in district_ids:\r\n            district_ids.append(item.district_id)\r\n        if item.state and item.state not in states:\r\n            states.append(item.state);\r\n    return len(district_ids), len(states)\r\n\r\ndef total_number_of_products():\r\n    product_list = ProductsInfo.objects.filter()\r\n    product_data = []\r\n\r\n    for product in product_list:\r\n        product_data.append({ \"product_name\": product.product_name, \"url\": product.url })\r\n\r\n    return product_data, len(product_data)\r\n\r\ndef broadband_connection():\r\n    broad_band = CountyConnectionInfo.objects.all()\r\n    state_broadband = {}\r\n    states = ['Utah', 'Illinois', 'Wisconsin', 'North Carolina', 'Missouri', 'Washington', 'Connecticut',\r\n              'Massachusetts', 'New York', 'Indiana', 'Virginia', 'Ohio', 'New Jersey', 'California', 'Arizona',\r\n              'Texas']\r\n    for x in broad_band:\r\n        if x.state not in state_broadband and x.state in states:\r\n            state_broadband[x.state] = []\r\n        elif x.state in states:\r\n            state_broadband[x.state].append((x.county_code, x.ratio, x.county_name))\r\n    for state in state_broadband.keys():\r\n        if state in states:\r\n            avg = 0.0\r\n            for x, item, y in state_broadband[state]:\r\n                if item != 0.0:\r\n                    # print(\"The item is\",item)\r\n                    avg = avg + item\r\n            if avg / (len(state_broadband[state]) + 1) != 0.0:\r\n                # print(state)\r\n                # print(len(state_broadband[state])+1)\r\n                state_broadband[state] = round(avg / (len(state_broadband[state]) + 1), 2)\r\n\r\n    states = list(state_broadband.keys())\r\n    print(\"The states\", states)\r\n\r\n    broadband_avg = list(state_broadband.values())\r\n    # print(broadband_avg)\r\n    return states, broadband_avg\r\n\r\ndef total_locale_type():\r\n    suburb = Districts.objects.filter(locale=\"Suburb\")\r\n    rural = Districts.objects.filter(locale=\"Rural\")\r\n    town = Districts.objects.filter(locale=\"Town\")\r\n    city = Districts.objects.filter(locale=\"City\")\r\n    local_type = []\r\n\r\n    suburb_list = []\r\n    rural_list = []\r\n    town_list = []\r\n    city_list = []\r\n    for item in suburb:\r\n        suburb_list.append(item)\r\n\r\n    for item in rural:\r\n        rural_list.append(item)\r\n    for item in town:\r\n         town_list.append(item)\r\n    for item in city:\r\n        city_list.append(item)\r\n\r\n    local_type.append(len(suburb_list))\r\n    local_type.append(len(rural_list))\r\n    local_type.append(len(town_list))\r\n    local_type.append(len(city_list))\r\n    return len(suburb_list), len(rural_list), len(town_list), len(city_list), local_type\r\n\r\n\r\ndef avg(li):\r\n    j = 0\r\n    for i in li:\r\n        j = j + i\r\n    return (int(j/len(li)))\r\n\r\n@login_required(login_url='/dashboard/accounts/login/')\r\ndef show_graphs_for_users(request):\r\n    # userObject = UserProfile.objects.filter(user_id=request.user.id)\r\n   logged_in_user_type = request.user.userprofile.user_type\r\n   print('Logged in user type is',logged_in_user_type )\r\n   print('This statement is',logged_in_user_type == 'student')\r\n   if (logged_in_user_type == 'student'):\r\n       return HttpResponseRedirect('/dashboard/student/')\r\n   elif (logged_in_user_type == 'educator'):\r\n       #call educator methods here\r\n       print('Hi educator')\r\n       return HttpResponseRedirect('/dashboard/speedtest/')\r\n\r\n      #forces user to login if they try to go /dashboard/home path\r\n\r\n@login_required(login_url='/dashboard/accounts/login/') \r\ndef percentage_access_black_hispanic(request):\r\n    states = ['Utah', 'Illinois', 'Wisconsin', 'NC', 'Missouri', 'Washington', 'Massachusetts', 'NY', 'Indiana',\r\n              'Virginia', 'New Jersey', 'Texas', 'DOC']\r\n    location_list = []\r\n\r\n    Utah = []\r\n    Illi = []\r\n    Wisco = []\r\n    mean_perc = []\r\n    north = []\r\n    miss = []\r\n    wash = []\r\n    connect = []\r\n    # mass = []\r\n    newyork = []\r\n    indiana = []\r\n    vir = []\r\n    ohio = []\r\n    jersey = []\r\n    cal = []\r\n    # dis = []\r\n    ari = []\r\n    tex = []\r\n    s = []\r\n    exp = []\r\n\r\n    obj = Districts.objects.all()\r\n\r\n    for district_info in obj:\r\n        if district_info.state == 'Utah':\r\n            Utah.append(district_info.pct_black_hispanic)\r\n\r\n        elif district_info.state == 'Illinois':\r\n            Illi.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'Wisconsin':\r\n            Wisco.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'North Carolina':\r\n            north.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'Missouri':\r\n            miss.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'Washington':\r\n            wash.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'Connecticut':\r\n            connect.append(district_info.pct_black_hispanic)\r\n        # elif district_info.state == 'Massachusetts':\r\n        #     mass.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'New York':\r\n            newyork.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'Indiana':\r\n            indiana.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'Virginia':\r\n            vir.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'Ohio':\r\n            ohio.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'New Jersey':\r\n            jersey.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'California':\r\n            cal.append(district_info.pct_black_hispanic)\r\n        # elif district_info.state == 'District Of Columbia':\r\n        #     dis.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'Arizona':\r\n            ari.append(district_info.pct_black_hispanic)\r\n        elif district_info.state == 'Texas':\r\n            tex.append(district_info.pct_black_hispanic)\r\n\r\n    mean_perc.append((sum(Utah)) / len(Utah))\r\n    mean_perc.append((sum(Illi)) / len(Illi))\r\n    mean_perc.append((sum(Wisco)) / len(Wisco))\r\n    mean_perc.append((sum(north)) / len(north))\r\n    mean_perc.append((sum(miss)) / len(miss))\r\n    mean_perc.append((sum(wash)) / len(wash))\r\n    # mean_perc.append((sum(mass)) / len(mass))\r\n    mean_perc.append((sum(newyork)) / len(newyork))\r\n    mean_perc.append((sum(indiana)) / len(indiana))\r\n    mean_perc.append((sum(vir)) / len(vir))\r\n    mean_perc.append((sum(jersey)) / len(jersey))\r\n    mean_perc.append((sum(tex)) / len(tex))\r\n    # mean_perc.append((sum(dis)) / len(dis))\r\n    \r\n    final_state_list = json.dumps(states)\r\n    final_mean_perc_list = json.dumps(mean_perc)\r\n    # print(\"The list is \",final_state_list)\r\n    # print(\"The perc list is \",final_mean_perc_list)\r\n\r\n    \r\n\r\n    s, exp = expenditure_per_pupil_in_different_states()\r\n    print(\"Expenditure is\",exp)\r\n    form = create_district_graph()\r\n    county, district = percentage_access_in_state(\"Illinois\")\r\n\r\n    keyVal = {};\r\n    originalData = []   # Data contains array of objects\r\n\r\n    i = 0\r\n    for i in range(len(s)):\r\n        originalData.append({ \"state\": s[i], \"expenditure\": exp[i] });\r\n    \r\n    data = json.dumps(originalData)              # data in JSON format ready to be used by d3.js\r\n\r\n    numberofdistricts, numberofstates = totalNumberOfSchoolDistricts()         # statistic 1\r\n    print('Total number of districts is', numberofdistricts)\r\n\r\n    products, numberofproducts = total_number_of_products()                    #statistic 2\r\n\r\n    suburb, rural, town, city,type_of_local = total_locale_type()\r\n\r\n    top10Products, bottom20Products, productsOnly, engagementOnly =  productEngagement()\r\n\r\n    topProducts = json.dumps(top10Products)\r\n    bottomProducts = json.dumps(bottom20Products)\r\n\r\n    productsOnly = json.dumps(productsOnly)\r\n    engagementOnly = json.dumps(engagementOnly)\r\n    \r\n    st, broadband_average = broadband_connection()\r\n    states_for_broadband = json.dumps(st)\r\n    average_for_broadband = json.dumps(broadband_average)\r\n\r\n    if request.method == 'POST':\r\n        # form = DistrictForm(request.POST)\r\n        form = FilterForm(request.POST)\r\n        if form.is_valid():\r\n\r\n            # input_state = form.cleaned_data['state']\r\n            input_country = request.POST.get('country')\r\n            print(\"The country is\",input_country)\r\n\r\n            # print('location list is ', location_list)\r\n            input_location = ''\r\n            if (request.POST.get('locations') != None) :\r\n                 input_location = request.POST.get('locations')\r\n                 print('input Location is', input_location)\r\n\r\n\r\n            if input_country == 'usa':\r\n                location_list = ['Utah', 'Illinois', 'Wisconsin', 'North Carolina', 'Missouri', 'Washington', 'Massachusetts', 'New York', 'Indiana',\r\n              'Virginia', 'New Jersey', 'Texas', 'District of Columbia']\r\n                if input_location:\r\n                    #state related data\r\n                    return render(request, 'state.html')\r\n                else:\r\n                    return render(request, 'index.html', {'district': district, 'county': county, 'form': form, 'state':final_state_list , 'perc': final_mean_perc_list , 'st':s, 'ex':exp, 'mydata': data, 'location_list': location_list, 'inputlocation': input_location, 'inputcountry': input_country, 'firststat': numberofdistricts, 'secondstat': numberofstates, 'thirdstat': numberofproducts, 'products': products, 'suburb': suburb, 'rural': rural, 'town': town, 'city': city })\r\n\r\n            else:\r\n                # need to check here if user selected only country or also a state, if country show overview, if state show state related graphs\r\n                location_list = ['Alberta', 'British Columbia', 'Manitoba', 'New Brunswick', 'Newfoundland and Labrador', 'Northwest Territories', 'Nova Scotia', 'Nunavut', 'Ontario', 'Prince Edward Island', 'Quebec', 'Saskatchewan', 'Yukon']\r\n                # return render(request, 'sign-up.html')     # this is where we show canadian data\r\n\r\n            \r\n\r\n            # return render(request, 'index.html', {'district': district, 'county': county, 'form': form, 'state':final_state_list , 'perc': final_mean_perc_list , 'st':s, 'ex':exp, 'mydata': data, 'location_list': location_list, 'inputlocation': input_location, 'inputcountry': input_country, 'firststat': numberofdistricts })\r\n\r\n    return render(request, 'index.html', {'state':final_state_list , 'perc': final_mean_perc_list, 'form': form, 'st':s, 'ex':exp, 'mydata': data, 'firststat': numberofdistricts, 'secondstat': numberofstates, 'thirdstat': numberofproducts, 'products': products, 'suburb': suburb, 'rural': rural, 'town': town, 'city': city, 'localtype':type_of_local ,'top10': topProducts, 'bottom20': bottomProducts, 'pro': productsOnly, 'engo': engagementOnly, 'stb': states_for_broadband, 'avgb': average_for_broadband})\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Digital_Dashboard/Dashboard/views.py b/Digital_Dashboard/Dashboard/views.py
--- a/Digital_Dashboard/Dashboard/views.py	(revision e6a93765bf5370dda1624ddf29fd6b4b7082a55e)
+++ b/Digital_Dashboard/Dashboard/views.py	(date 1645664834775)
@@ -1,29 +1,22 @@
+import math
+
 from django.shortcuts import render, redirect
 from django.contrib.auth import login, authenticate
-from django.core import serializers
-from django.http import JsonResponse
 import json
 import requests
-import collections, functools, operator
+import numpy as np
 from django.http import HttpResponse, HttpResponseRedirect
-from django.contrib.auth.forms import UserCreationForm
 from .forms import UserForm, ProfileForm
-
 from .models import Districts
 from .models import ProductsInfo
 from .models import EngagementInfo
-from .forms import DistrictForm
 from .forms import FilterForm
-from .models import UserProfile
 from .models import StudentFormInfo
 from .models import RatingInfo
 from .models import CountyConnectionInfo
 from django.contrib.auth.decorators import login_required
-from rest_framework.decorators import api_view
-from django.http import JsonResponse
-from django.views.decorators.csrf import csrf_exempt
 from random import randint
-from collections import defaultdict
+
 from operator import itemgetter
 
 names_of_places = []
@@ -55,7 +48,6 @@
             return HttpResponseRedirect('/dashboard/home',{'form' : form})
 
         else:
-            # return HttpResponseRedirect('/dashboard/signup',{'form' : form})
             print(form.errors)
         
     else:
@@ -200,10 +192,7 @@
 def show_sign_up_page(request):
     return render(request, 'sign-up.html')
 
-# @api_view(['POST'])
-# @csrf_exempt
-# def coordinates_output(request):
-#     print("The latitude is",request.data['%22lat22'])
+
 
 def generate_product_info(request):
     return render(request, 'main.html')
@@ -219,11 +208,9 @@
     district_list = []
     county_connection = []
     for x in state_list:
-        # print("The district {}".format(state),x.county_connection)
         county_connection.append(x.county_connection)
         district_list.append(x.district_id)
-        # print("The county connection",county_connection)
-        # print("The district_id", district_list)
+
 
     return county_connection,district_list
 
@@ -357,8 +344,7 @@
     else:
         avg_expenditure_for_states.append(0)
 
-    # final_states_list = json.dumps(states)
-    # final_expenditure_list = json.dumps(avg_expenditure_for_states)    #commenting lines 212 and 213 for now
+
     return states,avg_expenditure_for_states
 
 
@@ -366,7 +352,7 @@
     obj = EngagementInfo.objects.all().order_by('-engagement_index')
 
     for x in obj:
-        print("I am are",x.lp_id, x.engagement_index)
+        print("I am are", x.lp_id, x.engagement_index)
     products = ProductsInfo.objects.all()
     products_data = []
     consumer_products = []
@@ -374,8 +360,9 @@
     products_array = []
     single_products_array = []
     single_average_engagement_array = []
+    products_with_least_engagement_array = []
+    least_engagement_array = []
 
-    
     for x in obj:
         for product in products:
             if x.lp_id == product.lpid:
@@ -389,34 +376,38 @@
     unique_products = set(consumer_products)
     print(unique_products)
 
-    for p in unique_products: 
+    for p in unique_products:
         average = 0
-        count = 0   
+        count = 0
         for dict in products_data:
             if dict['name'] == p:
                 average = average + dict['engagement']
                 print('GS', p, average)
                 count = count + 1
-        products_array.append({'name': p, 'avg': average/count})
+        products_array.append({'name': p, 'avg': average / count})
 
-
     print(products_array)
 
     top10products = sorted(products_array, key=itemgetter('avg'), reverse=True)[0:10]
 
-    least10products = sorted(products_array, key=itemgetter('avg'), reverse=True)[-20:]
+    least10products = sorted(products_array, key=itemgetter('avg'), reverse=True)[-15:-5]
     print("least 10 is ", least10products)
 
     for item in top10products:
         for key, value in item.items():
             if key == 'name':
-               single_products_array.append(value)
+                single_products_array.append(value)
             elif key == 'avg':
-                 single_average_engagement_array.append(value)
+                single_average_engagement_array.append(value)
 
+    for p in least10products:
+        for k, v in p.items():
+            if k == 'name':
+                products_with_least_engagement_array.append(v)
+            elif k == 'avg':
+                least_engagement_array.append(v)
 
-    return top10products, least10products, single_products_array, single_average_engagement_array
-
+    return products_with_least_engagement_array, least_engagement_array, single_products_array, single_average_engagement_array
 
 
 def totalNumberOfSchoolDistricts():
@@ -439,6 +430,42 @@
 
     return product_data, len(product_data)
 
+
+def free_reduced():
+    district = Districts.objects.all()
+    free_reduce = {}
+    avg_free_reduced = []
+
+    for x in district:
+        if x.state not in free_reduce:
+            free_reduce[x.state] = []
+        else:
+            free_reduce[x.state].append(x.free_reduced)
+    states = list(free_reduce.keys())
+    for state in states:
+        free_reduce[state] = round(np.mean(free_reduce[state]),2)
+    return free_reduce
+
+
+def product_engage(lp_id):
+    products = EngagementInfo.objects.filter(lp_id=lp_id)
+    products_info = ProductsInfo.objects.filter(lpid=lp_id)
+    district_engagement = dict()
+    time = []
+    engagement = []
+    p_info = ''
+
+
+    for product in products:
+        engagement.append(product.engagement_index)
+        time.append(product.timestamp)
+
+    for info in products_info:
+        p_info = info.product_name
+        print(p_info)
+
+    return engagement,time,p_info
+
 def broadband_connection():
     broad_band = CountyConnectionInfo.objects.all()
     state_broadband = {}
@@ -455,18 +482,14 @@
             avg = 0.0
             for x, item, y in state_broadband[state]:
                 if item != 0.0:
-                    # print("The item is",item)
                     avg = avg + item
             if avg / (len(state_broadband[state]) + 1) != 0.0:
-                # print(state)
-                # print(len(state_broadband[state])+1)
                 state_broadband[state] = round(avg / (len(state_broadband[state]) + 1), 2)
 
     states = list(state_broadband.keys())
     print("The states", states)
 
     broadband_avg = list(state_broadband.values())
-    # print(broadband_avg)
     return states, broadband_avg
 
 def total_locale_type():
@@ -522,7 +545,8 @@
 def percentage_access_black_hispanic(request):
     states = ['Utah', 'Illinois', 'Wisconsin', 'NC', 'Missouri', 'Washington', 'Massachusetts', 'NY', 'Indiana',
               'Virginia', 'New Jersey', 'Texas', 'DOC']
-    location_list = []
+
+    # Removed Massachusetts,District of Columbia
 
     Utah = []
     Illi = []
@@ -542,8 +566,6 @@
     # dis = []
     ari = []
     tex = []
-    s = []
-    exp = []
 
     obj = Districts.objects.all()
 
@@ -577,31 +599,26 @@
             jersey.append(district_info.pct_black_hispanic)
         elif district_info.state == 'California':
             cal.append(district_info.pct_black_hispanic)
-        # elif district_info.state == 'District Of Columbia':
-        #     dis.append(district_info.pct_black_hispanic)
         elif district_info.state == 'Arizona':
             ari.append(district_info.pct_black_hispanic)
         elif district_info.state == 'Texas':
             tex.append(district_info.pct_black_hispanic)
 
-    mean_perc.append((sum(Utah)) / len(Utah))
-    mean_perc.append((sum(Illi)) / len(Illi))
-    mean_perc.append((sum(Wisco)) / len(Wisco))
-    mean_perc.append((sum(north)) / len(north))
-    mean_perc.append((sum(miss)) / len(miss))
-    mean_perc.append((sum(wash)) / len(wash))
-    # mean_perc.append((sum(mass)) / len(mass))
-    mean_perc.append((sum(newyork)) / len(newyork))
-    mean_perc.append((sum(indiana)) / len(indiana))
-    mean_perc.append((sum(vir)) / len(vir))
-    mean_perc.append((sum(jersey)) / len(jersey))
-    mean_perc.append((sum(tex)) / len(tex))
-    # mean_perc.append((sum(dis)) / len(dis))
+    mean_perc.append(round((sum(Utah)) / len(Utah),2))
+    mean_perc.append(round((sum(Illi)) / len(Illi),2))
+    mean_perc.append(round((sum(Wisco)) / len(Wisco),2))
+    mean_perc.append(round((sum(north)) / len(north),2))
+    mean_perc.append(round((sum(miss)) / len(miss),2))
+    mean_perc.append(round((sum(wash)) / len(wash),2))
+    mean_perc.append(round((sum(newyork)) / len(newyork),2))
+    mean_perc.append(round((sum(indiana)) / len(indiana),2))
+    mean_perc.append(round((sum(vir)) / len(vir),2))
+    mean_perc.append(round((sum(jersey)) / len(jersey),2))
+    mean_perc.append(round((sum(tex)) / len(tex),2))
     
     final_state_list = json.dumps(states)
     final_mean_perc_list = json.dumps(mean_perc)
-    # print("The list is ",final_state_list)
-    # print("The perc list is ",final_mean_perc_list)
+
 
     
 
@@ -626,18 +643,44 @@
 
     suburb, rural, town, city,type_of_local = total_locale_type()
 
-    top10Products, bottom20Products, productsOnly, engagementOnly =  productEngagement()
-
-    topProducts = json.dumps(top10Products)
-    bottomProducts = json.dumps(bottom20Products)
+    bottomProducts, engagementOfLeastProducts, productsOnly, engagementOnly =  productEngagement()
 
     productsOnly = json.dumps(productsOnly)
     engagementOnly = json.dumps(engagementOnly)
+    leastProductsOnly = json.dumps(bottomProducts)
+    leastEngagementOnly = json.dumps(engagementOfLeastProducts)
+
+
+
+
     
     st, broadband_average = broadband_connection()
     states_for_broadband = json.dumps(st)
     average_for_broadband = json.dumps(broadband_average)
 
+    engagement, time, product_info = product_engage(60825)
+    engagement = json.dumps(engagement)
+    time = json.dumps(time)
+    product_info = json.dumps(product_info)
+
+
+    reduced = free_reduced()
+
+
+    reduced_values = list(reduced.values())
+    reduced_keys = list(reduced.keys())
+    for x, y in reduced.items():
+        if math.isnan(y):
+            print(":", y)
+            reduced_values.remove(y)
+            reduced_keys.remove(x)
+
+    multiple_reduced_values = json.dumps(reduced_values[:len(mean_perc)])
+    multiple_pct_ethic = json.dumps(mean_perc[:len(mean_perc)])
+    multiple_state = json.dumps(reduced_keys[:len(mean_perc)])
+
+
+
     if request.method == 'POST':
         # form = DistrictForm(request.POST)
         form = FilterForm(request.POST)
@@ -661,16 +704,25 @@
                     #state related data
                     return render(request, 'state.html')
                 else:
-                    return render(request, 'index.html', {'district': district, 'county': county, 'form': form, 'state':final_state_list , 'perc': final_mean_perc_list , 'st':s, 'ex':exp, 'mydata': data, 'location_list': location_list, 'inputlocation': input_location, 'inputcountry': input_country, 'firststat': numberofdistricts, 'secondstat': numberofstates, 'thirdstat': numberofproducts, 'products': products, 'suburb': suburb, 'rural': rural, 'town': town, 'city': city })
+                    return render(request, 'index.html', {'district': district, 'county': county, 'form': form, 'state':final_state_list , 'perc': final_mean_perc_list , 'st':s, 'ex':exp, 'mydata': data, 'location_list': location_list, 'inputlocation': input_location, 'inputcountry': input_country, 'firststat': numberofdistricts, 'secondstat': numberofstates, 'thirdstat': numberofproducts, 'products': products, 'suburb': suburb, 'rural': rural, 'town': town, 'city': city,
+                                                          'engagement': engagement, 'product_info': product_info,'time':time,
+                                                          'reduced_free': multiple_reduced_values,
+                                                          "pct_free": multiple_pct_ethic,
+                                                          'multiple_state': multiple_state,'lepro': leastProductsOnly, 'leeng': leastEngagementOnly
+                                                          })
 
             else:
                 # need to check here if user selected only country or also a state, if country show overview, if state show state related graphs
                 location_list = ['Alberta', 'British Columbia', 'Manitoba', 'New Brunswick', 'Newfoundland and Labrador', 'Northwest Territories', 'Nova Scotia', 'Nunavut', 'Ontario', 'Prince Edward Island', 'Quebec', 'Saskatchewan', 'Yukon']
-                # return render(request, 'sign-up.html')     # this is where we show canadian data
+
 
             
 
-            # return render(request, 'index.html', {'district': district, 'county': county, 'form': form, 'state':final_state_list , 'perc': final_mean_perc_list , 'st':s, 'ex':exp, 'mydata': data, 'location_list': location_list, 'inputlocation': input_location, 'inputcountry': input_country, 'firststat': numberofdistricts })
 
-    return render(request, 'index.html', {'state':final_state_list , 'perc': final_mean_perc_list, 'form': form, 'st':s, 'ex':exp, 'mydata': data, 'firststat': numberofdistricts, 'secondstat': numberofstates, 'thirdstat': numberofproducts, 'products': products, 'suburb': suburb, 'rural': rural, 'town': town, 'city': city, 'localtype':type_of_local ,'top10': topProducts, 'bottom20': bottomProducts, 'pro': productsOnly, 'engo': engagementOnly, 'stb': states_for_broadband, 'avgb': average_for_broadband})
+
+    return render(request, 'index.html', {'state':final_state_list , 'perc': final_mean_perc_list, 'form': form, 'st':s, 'ex':exp, 'mydata': data, 'firststat': numberofdistricts, 'secondstat': numberofstates, 'thirdstat': numberofproducts, 'products': products, 'suburb': suburb, 'rural': rural, 'town': town, 'city': city, 'localtype':type_of_local , 'pro': productsOnly, 'engo': engagementOnly, 'stb': states_for_broadband,
+                                          'avgb': average_for_broadband,'engagement': engagement, 'product_info': product_info,'time':time,
+                                          'reduced_free': multiple_reduced_values, "pct_free": multiple_pct_ethic,
+                                          'multiple_state': multiple_state,'lepro': leastProductsOnly, 'leeng': leastEngagementOnly
+                                          })
 
Index: Digital_Dashboard/Dashboard/templates/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{% load static %}\r\n{% load crispy_forms_tags %}\r\n<!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <meta name=\"description\" content=\"\" />\r\n    <meta name=\"author\" content=\"\" />\r\n    <!-- Favicon icon -->\r\n    <link\r\n      rel=\"icon\"\r\n      type=\"image/png\"\r\n      sizes=\"16x16\"\r\n      href=\"{% static 'images/favicon.png' %}\"\r\n    />\r\n    <title>Digital Dashboard</title>\r\n    <!-- Custom CSS -->\r\n    <link href=\"{% static 'css/float-chart.css' %}\" rel=\"stylesheet\" />\r\n    <!-- Custom CSS -->\r\n    <link href=\"{% static 'css/style.min.css' %}\" rel=\"stylesheet\" />\r\n    <link href=\"{% static 'css/custom.css' %}\" rel=\"stylesheet\" />\r\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\">\r\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\r\n      rel=\"stylesheet\">\r\n\r\n    <script src=\"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js' %}\"></script>\r\n    <script src=\"https://oss.maxcdn.com/libs/respond.js' %}/1.4.2/respond.min.js' %}\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js\"></script>\r\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js\" integrity=\"sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy\" crossorigin=\"anonymous\"></script>\r\n\r\n    \r\n    <script src=\"https://d3js.org/d3.v4.js\" charset=\"utf-8\"></script>\r\n    <script src=\"https://d3js.org/d3-scale-chromatic.v1.min.js\" charset=\"utf-8\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\" crossorigin=\"anonymous\"></script>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/apexcharts\"></script>\r\n  </head>\r\n\r\n  <body>\r\n    \r\n   \r\n    \r\n    <div id=\"main-wrapper\">\r\n      \r\n      <aside class=\"left-sidebar\" data-sidebarbg=\"skin5\">\r\n        <!-- Sidebar scroll-->\r\n        <div class=\"scroll-sidebar\">\r\n          <!-- Sidebar navigation-->\r\n          <nav class=\"sidebar-nav\">\r\n            <ul id=\"sidebarnav\" class=\"p-t-30\">\r\n              <li class=\"sidebar-item\">\r\n                <h4 class=\"sidebar-link waves-effect waves-dark\"> <i class=\"material-icons\">dashboard</i\r\n                  > Data Dash</h4>\r\n              </li>\r\n\r\n\r\n              {% if user.is_authenticated %}\r\n              <li class=\"sidebar-item\">\r\n                <a\r\n                  class=\"sidebar-link waves-effect waves-dark\"\r\n                  aria-expanded=\"false\"\r\n                  ><span class=\"hide-menu\"> Welcome {{ user.username }} ({{user.userprofile.user_type}}) </span></a>\r\n              </li>\r\n\r\n              <li class=\"sidebar-item\">\r\n                <a\r\n                  class=\"sidebar-link waves-effect waves-dark\"\r\n                  href=\"/dashboard/home\"\r\n                  aria-expanded=\"false\"\r\n                  ><i class=\"material-icons\">dashboard</i\r\n                  ><span class=\"hide-menu\">Dashboard </span></a\r\n                >\r\n              </li>\r\n              <!-- <li class=\"sidebar-item\">\r\n                <a\r\n                  class=\"sidebar-link waves-effect waves-dark\"\r\n                  href=\"/dashboard/accounts/logout\"\r\n                  aria-expanded=\"false\"\r\n                  ><i class=\"material-icons\">login</i><span class=\"hide-menu\">Logout </span></a\r\n                >\r\n              </li> -->\r\n\r\n\r\n              <li class=\"sidebar-item\">\r\n                <a\r\n                  class=\"sidebar-link waves-effect waves-dark\"\r\n                  href=\"javascript:void(0)\"\r\n                  aria-expanded=\"false\"\r\n                  ><i class=\"material-icons\">settings</i\r\n                  ><span class=\"hide-menu\">User Settings </span></a    \r\n             \r\n              </li>\r\n\r\n              <li class=\"sidebar-item\">\r\n                <a\r\n                  class=\"sidebar-link waves-effect waves-dark\"\r\n                  href=\"/dashboard/accounts/password_change\"\r\n                  aria-expanded=\"false\"\r\n                  ><i class=\"material-icons\">login</i><span class=\"hide-menu\">Change Password </span></a\r\n                >\r\n              </li>\r\n\r\n              <li class=\"sidebar-item\">\r\n                <a\r\n                  class=\"sidebar-link waves-effect waves-dark\"\r\n                  href=\"/dashboard/speedtest/\"\r\n                  aria-expanded=\"false\"\r\n                  ><i class=\"material-icons\">login</i><span class=\"hide-menu\">Speed Test </span></a\r\n                >\r\n              </li>\r\n\r\n              {% else %}\r\n              <li class=\"sidebar-item\">\r\n                <a\r\n                  class=\"sidebar-link waves-effect waves-dark\"\r\n                  href=\"/dashboard/accounts/login\"\r\n                  aria-expanded=\"false\"\r\n                  ><i class=\"material-icons\">login</i><span class=\"hide-menu\">Login </span></a\r\n                >\r\n              </li>\r\n              {% endif %}\r\n\r\n\r\n              <li class=\"sidebar-item\">\r\n                <a\r\n                  class=\"sidebar-link waves-effect waves-dark\"\r\n                  href=\"/dashboard/wifihotspots\"\r\n                  aria-expanded=\"false\"\r\n                  ><i class=\"material-icons\">logout</i><span class=\"hide-menu\">Wifi Hotspots </span></a\r\n                >\r\n              </li>\r\n\r\n              <li class=\"sidebar-item\">\r\n                <a\r\n                  class=\"sidebar-link waves-effect waves-dark\"\r\n                  href=\"/dashboard/statcollector\"\r\n                  aria-expanded=\"false\"\r\n                  ><i class=\"material-icons\">logout</i><span class=\"hide-menu\">Canadian Statistics </span></a\r\n                >\r\n              </li>\r\n              \r\n\r\n              <li class=\"sidebar-item\">\r\n                <a\r\n                  class=\"sidebar-link waves-effect waves-dark\"\r\n                  href=\"/dashboard/accounts/logout\"\r\n                  aria-expanded=\"false\"\r\n                  ><i class=\"material-icons\">logout</i><span class=\"hide-menu\">Logout </span></a\r\n                >\r\n              </li>\r\n\r\n\r\n             \r\n              \r\n            </ul>\r\n          </nav>\r\n          <!-- End Sidebar navigation -->\r\n        </div>\r\n        <!-- End Sidebar scroll-->\r\n      </aside>\r\n      \r\n      <div class=\"page-wrapper\">\r\n        \r\n               \r\n           <br>\r\n\r\n           <!-- Note the state/province probably needs to be updated based on the Country selected -->\r\n          <div class=\"content \">\r\n             <div class=\"container-fluid\">\r\n              <h4><strong>Digital Dashboard</strong></h4><br>\r\n                <form method=\"POST\">\r\n                  {% csrf_token %}\r\n                  \r\n                          <div class=\"form-inline\">\r\n                            <div class=\"form-group\" style=\"margin-right: 15px;\">\r\n                              <input type=\"hidden\">Country</input>\r\n                              <select class=\"form-select\" name=\"country\" id=\"different_countries\" onchange=form.submit()>\r\n                                <option disabled selected=\"true\"> -- select an option -- </option>\r\n                                {% if inputcountry == 'usa' %}\r\n                                <option selected=\"true\" value=\"usa\">USA</option>\r\n                                <option value=\"canada\">Canada</option>\r\n                                {% elif inputcountry == 'canada' %}\r\n                                <option selected=\"true\" value=\"canada\">Canada</option>\r\n                                <option value=\"usa\">USA</option>\r\n                                {% else %}\r\n                                <option value=\"canada\">Canada</option>\r\n                                <option value=\"usa\">USA</option>\r\n                                {% endif %}\r\n                                    \r\n                              </select>\r\n                            </div>\r\n\r\n                           \r\n                          <div class=\"form-group\" style=\"margin-right: 15px;\">\r\n                            <input type=\"hidden\">State/Province</input>\r\n                            <select name=\"locations\" id=\"different_locations\">\r\n                              <option disabled selected=\"true\"> -- select an option -- </option>\r\n                              {% for item in location_list  %}\r\n                                 {% if inputlocation == item %}\r\n                                 <option selected=\"true\" value=\"{{item}}\">{{ item }}</option>\r\n                                 {% else %}\r\n                                  <option value=\"{{item}}\">{{ item }}</option>\r\n                                 {% endif %}\r\n                              {% endfor %}\r\n                            </select>\r\n                          </div>\r\n                        \r\n                          <button type=\"submit\" class=\"btn btn-primary btn w-40\">Filter</button>\r\n                             \r\n\r\n                    </div>\r\n                    \r\n                  </form> \r\n\r\n                 \r\n                <br><br>\r\n                <div class=\"row\">\r\n\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"card\">\r\n                      <div class=\"card-header \">\r\n                        <h4 class=\"card-title\">Statistic 1 </h4>\r\n                     </div>\r\n                      <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">Total number of School Districts</h5>\r\n                        <!-- <div id=\"my_dataviz\"></div> -->\r\n                        <h1>{{firststat}}</h1>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"card\">\r\n                      <div class=\"card-header \">\r\n                        <h4 class=\"card-title\">Statistic 2 </h4>\r\n                     </div>\r\n                      <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">Number Of states</h5>\r\n                        <h1>{{secondstat}}</h1>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"card\">\r\n                      <div class=\"card-header \">\r\n                        <h4 class=\"card-title\">Statistic 3 </h4>\r\n                     </div>\r\n                      <div class=\"card-body\">\r\n                        \r\n                        <div class=\"row\">\r\n                          <h5 class=\"card-title mr-2\">Learning Products</h5>\r\n                          <button class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\">\r\n                              Products\r\n                          </button>\r\n                          \r\n                          \r\n                        </div>\r\n                        <h1>{{thirdstat}}</h1>\r\n                        \r\n                        \r\n                        <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                          <div class=\"modal-dialog\">\r\n                            <div class=\"modal-content\">\r\n                              <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\" id=\"staticBackdropLabel\">List of Products</h5>\r\n                                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                              </div>\r\n                              {% for product in products %}\r\n                              <div class=\"modal-body\">\r\n                                <a href=\"{{product.url}}\">{{product.product_name}}</a>\r\n                              </div>\r\n                              {% endfor %}\r\n                              <div class=\"modal-footer\">\r\n                                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                         <!-- <button class=\"btn btn-primary\">List of Learning Products</button> -->\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-sm-3\">\r\n                    <div class=\"card\">\r\n                      <div class=\"card-header \">\r\n                        <h4 class=\"card-title\">Statistic 4 </h4>\r\n                     </div>\r\n                      <div class=\"card-body\">\r\n                        <h5 class=\"card-title\">Number Of states</h5>\r\n                        <h1>{{secondstat}}</h1>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n\r\n                \r\n                  <div class=\"col-sm-12 col-md-12 col-xl-6\">\r\n                    <div class=\"card\" id=\"avgexpenditure\">\r\n                      <div class=\"card-header \">\r\n                        <h4 class=\"card-title\">Average Expenditure per pupil for different states </h4>\r\n                     </div>\r\n                      <div class=\"card-body align-items-center mx-auto mt-auto mb-auto\">\r\n                        \r\n                        <div id=\"my_dataviz\">\r\n\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-sm-12 col-md-12 col-xl-6\">\r\n                    <div class=\"card\">\r\n                      <div class=\"card-header \">\r\n                        <h4 class=\"card-title\">Percentage of Locale in All States </h4>\r\n                     </div>\r\n                      <div class=\"card-body align-items-center mx-auto mt-auto mb-auto\" >\r\n                        <div id=\"my_datadonutviz\"></div>\r\n                        \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-sm-6\">\r\n                    <div class=\"card\">\r\n                        <div class=\"card-header \">\r\n                          <h4 class=\"card-title\">Graph of Percentage Access of Black/Hispanic in different States </h4>\r\n                      </div>\r\n                      \r\n                        \r\n                      <div class=\"card-body align-items-center mx-auto mt-auto mb-auto\" >\r\n                          <div id=\"my_lollipopviz\"></div>\r\n                      </div>\r\n                            \r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-sm-6\">\r\n                    <div class=\"card\">\r\n                      <div class=\"card-header \">\r\n                        <h4 class=\"card-title\">Graph of Percentage Access of Black/Hispanic in different States </h4>\r\n                     </div>\r\n                      <div class=\"card-body align-items-center mx-auto mt-auto mb-auto\">\r\n                        <div id=\"my_databar\"></div> \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n\r\n                  <div class=\"col-sm-6 col-sm-12 col-md-12 col-xl-6 graphcard\">\r\n                    <div class=\"card\">\r\n                      <div class=\"card-header \">\r\n                        <h4 class=\"card-title\">Average Broadband Access > 200 KBPS </h4>\r\n                     </div>\r\n                      <div class=\"card-body\">\r\n                        <div id=\"my_datasimpleline\"></div> \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-sm-6 col-sm-12 col-md-12 col-xl-6\">\r\n                    <div class=\"card\">\r\n                      <div class=\"card-header \">\r\n                        <h4 class=\"card-title\">Top 10 Products with respect to Engagement Index </h4>\r\n                     </div> \r\n                      <div class=\"card-body\">\r\n                      <div id=\"my_datanewbar\"></div> \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n\r\n                  <div class=\"col-sm-6\">\r\n                    <div class=\"card\">\r\n                      <div class=\"card-header \">\r\n                        <h4 class=\"card-title\">Average Expenditure per pupil for different states  </h4>\r\n                     </div>\r\n                      <div class=\"card-body\">\r\n                      <div id=\"my_datanewverticalbar\"></div> \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-sm-6\">\r\n                    <div class=\"card\">\r\n                      <div class=\"card-header \">\r\n                        <h4 class=\"card-title\">Percentage of Locale in All States  </h4>\r\n                     </div>\r\n                      <div class=\"card-body\">\r\n                      <div id=\"my_datamydonutchart\"></div> \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n\r\n\r\n          <br>\r\n\r\n         \r\n\r\n        <script>\r\n          \r\n\r\n          var data = JSON.parse('{{ mydata | safe }}');\r\n          var margin = {top: 30, right: 30, bottom: 70, left: 60},\r\n          width =  650 - margin.left - margin.right,\r\n          height = 410 - margin.top - margin.bottom;\r\n\r\n          // append the svg object to the body of the page\r\n          var svg = d3.select(\"#my_dataviz\")\r\n            .append(\"svg\")\r\n              \r\n              .attr(\"width\", width + margin.left + margin.right)\r\n              .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n              .attr(\"transform\",\r\n                    \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n          // Parse the Data\r\n        \r\n          // X axis\r\n          var x = d3.scaleBand()\r\n            .range([ 0, width ])\r\n            .domain(data.map(function(d) { return d.state; }))\r\n            .padding(0.2);\r\n          svg.append(\"g\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(d3.axisBottom(x))\r\n            .selectAll(\"text\")\r\n              .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\r\n              .style(\"text-anchor\", \"end\");\r\n\r\n          // Add Y axis\r\n          var y = d3.scaleLinear()\r\n            .domain([0, 22000])\r\n            .range([ height, 0]);\r\n          svg.append(\"g\")\r\n            .call(d3.axisLeft(y));\r\n\r\n          // Bars\r\n          svg.selectAll(\"mybar\")\r\n            .data(data)\r\n            .enter()\r\n            .append(\"rect\")\r\n              .attr(\"x\", function(d) { return x(d.state); })\r\n              .attr(\"y\", function(d) { return y(d.expenditure); })\r\n              .attr(\"width\", x.bandwidth())\r\n              .attr(\"height\", function(d) { return height - y(d.expenditure); })\r\n              .attr(\"fill\", \"royalblue\")\r\n\r\n\r\n          //Donut graph\r\n          var widthofdonut = 700;\r\n          var heightofdonut = 410;\r\n          var marginfordonut = 5;\r\n          let s = JSON.parse('{{ suburb | safe }}');\r\n          let r = JSON.parse('{{ rural | safe }}');\r\n          let t = JSON.parse('{{ town | safe }}');\r\n          let c = JSON.parse('{{ city | safe }}');\r\n          console.log(\"value of suburb is\", s)\r\n          console.log(\"value of rural is\", r)\r\n          console.log(\"value of town is\", t)\r\n          console.log(\"value of city is\", c)\r\n          var radius = Math.min(widthofdonut, heightofdonut) / 2 - marginfordonut\r\n        \r\n\r\n            var svg1 = d3.select(\"#my_datadonutviz\")\r\n              .append(\"svg\")\r\n                .attr(\"width\", widthofdonut)\r\n                .attr(\"height\", heightofdonut)\r\n              .append(\"g\")\r\n                .attr(\"transform\", \"translate(\" + widthofdonut / 2 + \",\" + heightofdonut / 2 + \")\");\r\n\r\n            \r\n            let datafordonut = {suburb: s, rural: r, town:t, city:c}\r\n\r\n            // set the color scale\r\n            var colordonut = d3.scaleOrdinal()\r\n              .domain([\"suburb\", \"rural\", \"town\", \"city\"])\r\n              .range(d3.schemeDark2);\r\n\r\n            // Compute the position of each group on the pie:\r\n            var pie = d3.pie()\r\n              .sort(null) // Do not sort group by size\r\n              .value(function(d) {return d.value; })\r\n            var data_ready = pie(d3.entries(datafordonut))\r\n\r\n            // The arc generator\r\n            var arc = d3.arc()\r\n              .innerRadius(radius * 0.5)         // This is the size of the donut hole\r\n              .outerRadius(radius * 0.8)\r\n              \r\n\r\n            // Another arc that won't be drawn. Just for labels positioning\r\n            var outerArc = d3.arc()\r\n              .innerRadius(radius * 0.9)\r\n              .outerRadius(radius * 0.9)\r\n\r\n            // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\r\n            svg1\r\n              .selectAll('allSlices')\r\n              .data(data_ready)\r\n              .enter()\r\n              .append('path')\r\n              .attr('d', arc)\r\n              .attr('fill', function(d){ return(colordonut(d.data.key)) })\r\n              .attr(\"stroke\", \"white\")\r\n              .style(\"stroke-width\", \"2px\")\r\n              .style(\"opacity\", 0.7)\r\n\r\n            // Add the polylines between chart and labels:\r\n            svg1\r\n              .selectAll('allPolylines')\r\n              .data(data_ready)\r\n              .enter()\r\n              .append('polyline')\r\n                .attr(\"stroke\", \"black\")\r\n                .style(\"fill\", \"none\")\r\n                .attr(\"stroke-width\", 1)\r\n                .attr('points', function(d) {\r\n                  var posA = arc.centroid(d) // line insertion in the slice\r\n                  var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that\r\n                  var posC = outerArc.centroid(d); // Label position = almost the same as posB\r\n                  var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left\r\n                  posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\r\n                  return [posA, posB, posC]\r\n                })\r\n\r\n            // Add the polylines between chart and labels:\r\n            svg1\r\n              .selectAll('allLabels')\r\n              .data(data_ready)\r\n              .enter()\r\n              .append('text')\r\n                .text( function(d) { console.log(d.data.key) ; return d.data.key + \":\" + d.data.value } )\r\n                .attr('transform', function(d) {\r\n                    var pos = outerArc.centroid(d);\r\n                    var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\r\n                    pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\r\n                    return 'translate(' + pos + ')';\r\n                \r\n                })\r\n                .style('text-anchor', function(d) {\r\n                    var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\r\n                    return (midangle < Math.PI ? 'start' : 'end')\r\n                })\r\n\r\n              \r\n              var data = JSON.parse('{{ mydata | safe }}');\r\n              var marginline = {top: 10, right: 30, bottom: 30, left: 60},\r\n              widthline = 700 - marginline.left - marginline.right,\r\n              heightline = 400 - marginline.top - marginline.bottom;\r\n// #my_lollipopviz\r\n\r\n              // append the svg object to the body of the page\r\n              var svg2 = d3.select(\"#my_lollipopviz\")\r\n                .append(\"svg\")\r\n                  .attr(\"width\", widthline + marginline.left + marginline.right)\r\n                  .attr(\"height\", heightline + marginline.top + marginline.bottom + 45)\r\n                .append(\"g\")\r\n                  .attr(\"transform\",\r\n                        \"translate(\" + marginline.left + \",\" + marginline.top + \")\");\r\n\r\n              // Parse the Data\r\n              \r\n              // X axis\r\n              var x = d3.scaleBand()\r\n                .range([ 0, widthline ])\r\n                .domain(data.map(function(d) { return d.state; }))\r\n                .padding(1);\r\n              svg2.append(\"g\")\r\n                .attr(\"transform\", \"translate(0,\" + heightline + \")\")\r\n                .call(d3.axisBottom(x))\r\n                .selectAll(\"text\")\r\n                  .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\r\n                  .style(\"text-anchor\", \"end\")\r\n                  \r\n\r\n              // Add Y axis\r\n              var y = d3.scaleLinear()\r\n                .domain(d3.extent(data, d => d.expenditure))\r\n                .range([ heightline, 0]);\r\n              svg2.append(\"g\")\r\n                .call(d3.axisLeft(y));\r\n\r\n              // Lines\r\n              svg2.selectAll(\"myline\")\r\n                .data(data)\r\n                .enter()\r\n                .append(\"line\")\r\n                  .attr(\"x1\", function(d) { return x(d.state); })\r\n                  .attr(\"x2\", function(d) { return x(d.state); })\r\n                  .attr(\"y1\", function(d) { return y(d.expenditure); })\r\n                  .attr(\"y2\", y(0))\r\n                  .attr(\"stroke\", \"grey\")\r\n\r\n              // Circles\r\n              svg2.selectAll(\"mycircle\")\r\n                .data(data)\r\n                .enter()\r\n                .append(\"circle\")\r\n                  .attr(\"cx\", function(d) { return x(d.state); })\r\n                  .attr(\"cy\", function(d) { return y(d.expenditure); })\r\n                  .attr(\"r\", \"4\")\r\n                  .style(\"fill\", \"#69b3a2\")\r\n                  .attr(\"stroke\", \"black\")\r\n              \r\n          \r\n                // horizontal bar graph\r\n                var data = JSON.parse('{{ top10 | safe }}');\r\n                var margin = {top: 20, right: 30, bottom: 40, left: 100},\r\n                width = 700 - margin.left - margin.right,\r\n                height = 400 - margin.top - margin.bottom;\r\n\r\n                // append the svg object to the body of the page\r\n                var svg3 = d3.select(\"#my_databar\")\r\n                  .append(\"svg\")\r\n                    .attr(\"width\", width + margin.left + margin.right)\r\n                    .attr(\"height\", height + margin.top + margin.bottom + 45)\r\n                  .append(\"g\")\r\n                    .attr(\"transform\",\r\n                          \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n                \r\n                  // Add X axis\r\n                  var x = d3.scaleLinear()\r\n                    .domain([0, 1200])\r\n                    .range([ 0, width]);\r\n                  svg3.append(\"g\")\r\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                    .call(d3.axisBottom(x))\r\n                    .selectAll(\"text\")\r\n                      .attr(\"transform\", \"translate(-10,0)rotate(-45)\")\r\n                      .style(\"text-anchor\", \"end\");\r\n\r\n                  // Y axis\r\n                  var y = d3.scaleBand()\r\n                    .range([ 0, height ])\r\n                    .domain(data.map(function(d) { return d.name; }))\r\n                    .padding(.1);\r\n                  svg3.append(\"g\")\r\n                    .call(d3.axisLeft(y))\r\n\r\n                  //Bars\r\n                  svg3.selectAll(\"myRect\")\r\n                    .data(data)\r\n                    .enter()\r\n                    .append(\"rect\")\r\n                    .attr(\"x\", x(0) )\r\n                    .attr(\"y\", function(d) { return y(d.name); })\r\n                    .attr(\"width\", function(d) { return x(d.avg); })\r\n                    .attr(\"height\", y.bandwidth() )\r\n                    .attr(\"fill\", \"#69b3a2\")\r\n\r\n                \r\n                //  // Line graph\r\n\r\n                // var margin = {top: 10, right: 30, bottom: 30, left: 60},\r\n                // width = 460 - margin.left - margin.right,\r\n                // height = 400 - margin.top - margin.bottom;\r\n\r\n                // // append the svg object to the body of the page\r\n                // var svg4 = d3.select(\"#my_datasimpleline\")\r\n                //   .append(\"svg\")\r\n                //     .attr(\"width\", width + margin.left + margin.right)\r\n                //     .attr(\"height\", height + margin.top + margin.bottom)\r\n                //   .append(\"g\")\r\n                //     .attr(\"transform\",\r\n                //           \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n                // //Read the data\r\n                // d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv\",\r\n\r\n                //   // When reading the csv, I must format variables:\r\n                //   function(d){\r\n                //     return { date : d3.timeParse(\"%Y-%m-%d\")(d.date), value : d.value }\r\n                //   },\r\n\r\n                //   // Now I can use this dataset:\r\n                //   function(data) {\r\n\r\n                //     // Add X axis --> it is a date format\r\n                //     const month = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\r\n                //     var x = d3.scaleTime()\r\n                //       .domain(d3.extent(data, function(d) { return d.date; }))\r\n                      \r\n                //       .range([ 0, width ])\r\n                      \r\n\r\n                //     svg4.append(\"g\")\r\n                //       .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                //       .call(d3.axisBottom(x))\r\n                      \r\n\r\n                //     // Add Y axis\r\n                //     var y = d3.scaleLinear()\r\n                //       .domain([0, d3.max(data, function(d) { return +d.value; })])\r\n                //       .range([ height, 0 ]);\r\n                //     svg4.append(\"g\")\r\n                //       .call(d3.axisLeft(y));\r\n\r\n                //     // Add the line\r\n                //     svg4.append(\"path\")\r\n                //       .datum(data)\r\n                //       .attr(\"fill\", \"none\")\r\n                //       .attr(\"stroke\", \"steelblue\")\r\n                //       .attr(\"stroke-width\", 1.5)\r\n                //       .attr(\"d\", d3.line()\r\n                //         .x(function(d) { return x(d.date) })\r\n                //         .y(function(d) { return y(d.value) })\r\n                //         )\r\n\r\n                // }) \r\n                \r\n                \r\n\r\n                \r\n              //   var options = {\r\n              //   series: [{\r\n              //     name: \"Desktops\",\r\n              //     data: [10, 41, 35, 51, 49, 62, 69, 91, 148, 1]\r\n              // }],\r\n              //   chart: {\r\n              //   height: 350,\r\n              //   type: 'line',\r\n              //   zoom: {\r\n              //     enabled: false\r\n              //   }\r\n              // },\r\n              // dataLabels: {\r\n              //   enabled: false\r\n              // },\r\n              // stroke: {\r\n              //   curve: 'straight'\r\n              // },\r\n              \r\n              // grid: {\r\n              //   row: {\r\n              //     colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n              //     opacity: 0.5\r\n              //   },\r\n              // },\r\n              // xaxis: {\r\n              //   categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct'],\r\n              // }\r\n              // };\r\n              \r\n              // {{ pro | safe }}\r\n              // JSON.parse('{{ mydata | safe }}');\r\n              var e = {{ engo | safe }}\r\n              var prod = {{ pro | safe }}\r\n              \r\n              var states_broadband = {{ stb | safe }}\r\n              var average_broadband = {{ avgb | safe }}\r\n\r\n              var states_for_expenditure = {{ st | safe }}\r\n              var expenditure = {{ ex | safe }}\r\n              \r\n              var percentage_of_local = {{ localtype | safe }}\r\n              \r\n\r\n               \r\n              var baroptions = {\r\n              series: [{\r\n              data: e,\r\n            }],\r\n              chart: {\r\n              type: 'bar',\r\n              height: 350\r\n            },\r\n            plotOptions: {\r\n              bar: {\r\n                borderRadius: 4,\r\n                horizontal: true,\r\n              }\r\n            },\r\n            dataLabels: {\r\n              enabled: false\r\n            },\r\n            xaxis: {\r\n              categories: prod,\r\n            }\r\n            \r\n            };\r\n\r\n            // var chart = new ApexCharts(document.querySelector(\"#my_datasimpleline\"), options);\r\n            var barchart = new ApexCharts(document.querySelector(\"#my_datanewbar\"), baroptions);\r\n            // chart.render();\r\n            barchart.render();\r\n\r\n\r\n\r\n\r\n          console.log(average_broadband)\r\n          var optionsline = {\r\n          series: [{\r\n          data: average_broadband,\r\n        }],\r\n          chart: {\r\n          type: 'line',\r\n          height: 350\r\n        },\r\n        stroke: {\r\n          curve: 'stepline',\r\n        },\r\n        dataLabels: {\r\n          enabled: true\r\n        },\r\n\r\n        xaxis: {\r\n              categories: states_broadband,\r\n        },\r\n        \r\n        title: {\r\n          text: 'Stepline Chart',\r\n          align: 'left'\r\n        },\r\n        markers: {\r\n          hover: {\r\n            sizeOffset: 4\r\n          }\r\n        }\r\n        };\r\n\r\n        var chart = new ApexCharts(document.querySelector(\"#my_datasimpleline\"), optionsline);\r\n        chart.render();\r\n\r\n\r\n\r\n\r\n        var verticalbaroptions = {\r\n              series: [{\r\n              data: expenditure,\r\n              name: 'Expenditure',\r\n            }],\r\n              chart: {\r\n              type: 'bar',\r\n              height: 350,\r\n            },\r\n           \r\n            plotOptions: {\r\n              bar: {\r\n                borderRadius: 4,\r\n                \r\n              }\r\n            },\r\n            dataLabels: {\r\n              enabled: false\r\n            },\r\n            xaxis: {\r\n              categories: states_for_expenditure,\r\n            }\r\n            };\r\n            var verticalbarchart = new ApexCharts(document.querySelector(\"#my_datanewverticalbar\"), verticalbaroptions); \r\n            verticalbarchart.render();\r\n        \r\n            \r\n            console.log(percentage_of_local)\r\n            var donutoptions = {\r\n            series: percentage_of_local,\r\n            chart: {\r\n            type: 'donut',\r\n            height: 364\r\n          },\r\n          labels: ['suburb', 'rural', 'town', 'city'],\r\n          dataLabels: {\r\n          enabled: false\r\n          },\r\n          responsive: [{\r\n            breakpoint: 480,\r\n            \r\n            options: {\r\n              chart: {\r\n                width: 200\r\n              },\r\n              legend: {\r\n                position: 'bottom',\r\n                \r\n              }\r\n            }\r\n          }]\r\n          };\r\n\r\n          var donutchart = new ApexCharts(document.querySelector(\"#my_datamydonutchart\"), donutoptions);\r\n          donutchart.render();\r\n\r\n          </script>\r\n                         \r\n        \r\n\r\n        </div>\r\n            <!-- column -->\r\n\r\n            \r\n          </div>\r\n          <!-- ============================================================== -->\r\n          <!-- Recent comment and chats -->\r\n          <!-- ============================================================== -->\r\n        </div>\r\n        <!-- ============================================================== -->\r\n        <!-- End Container fluid  -->\r\n        <!-- ============================================================== -->\r\n        <!-- ============================================================== -->\r\n        <!-- footer -->\r\n        <!-- ============================================================== -->\r\n\r\n        <!-- ============================================================== -->\r\n        <!-- End footer -->\r\n        <!-- ============================================================== -->\r\n      </div>\r\n      <!-- ============================================================== -->\r\n      <!-- End Page wrapper  -->\r\n      <!-- ============================================================== -->\r\n    </div>\r\n    <!-- ============================================================== -->\r\n    <!-- End Wrapper -->\r\n    <!-- ============================================================== -->\r\n    <!-- ============================================================== -->\r\n    <!-- All Jquery -->\r\n    <!-- ============================================================== -->\r\n    <script src=\"{% static 'js/jquery.min.js' %}\"></script>\r\n    <!-- Bootstrap tether Core JavaScript -->\r\n    <script src=\"{% static 'js/popper.min.js' %}\"></script>\r\n    <script src=\"{% static 'js/bootstrap.min.js' %}\"></script>\r\n    <script src=\"{% static 'js/perfect-scrollbar.jquery.min.js' %}\"></script>\r\n    <script src=\"{% static 'js/sparkline.js' %}\"></script>\r\n    <!--Wave Effects -->\r\n    <script src=\"{% static 'js/waves.js' %}\"></script>\r\n    <!--Menu sidebar -->\r\n    <script src=\"{% static 'js/sidebarmenu.js' %}\"></script>\r\n    <!--Custom JavaScript -->\r\n    <script src=\"{% static 'js/custom.min.js' %}\"></script>\r\n    <!--This page JavaScript -->\r\n    <!-- <script src=\"dist/js/pages/dashboards/dashboard1.js' %}\"></script> -->\r\n    <!-- Charts js Files -->\r\n    <script src=\"{% static 'js/excanvas.js' %}\"></script>\r\n    <script src=\"{% static 'js/jquery.flot.js' %}\"></script>\r\n    <script src=\"{% static 'js/jquery.flot.pie.js' %}\"></script>\r\n    <script src=\"{% static 'js/jquery.flot.time.js' %}\"></script>\r\n    <script src=\"{% static 'js/jquery.flot.stack.js' %}\"></script>\r\n    <script src=\"{% static 'js/jquery.flot.crosshair.js' %}\"></script>\r\n    <script src=\"{% static 'js/jquery.flot.tooltip.min.js' %}\"></script>\r\n    <script src=\"{% static 'js/chart-page-init.js' %}\"></script>\r\n\r\n  </body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Digital_Dashboard/Dashboard/templates/index.html b/Digital_Dashboard/Dashboard/templates/index.html
--- a/Digital_Dashboard/Dashboard/templates/index.html	(revision e6a93765bf5370dda1624ddf29fd6b4b7082a55e)
+++ b/Digital_Dashboard/Dashboard/templates/index.html	(date 1645665689184)
@@ -296,59 +296,56 @@
                   </div>
 
 
-                
-                  <div class="col-sm-12 col-md-12 col-xl-6">
-                    <div class="card" id="avgexpenditure">
+
+                  <div class="col-sm-6 col-sm-12 col-md-12 col-xl-6">
+                    <div class="card">
                       <div class="card-header ">
-                        <h4 class="card-title">Average Expenditure per pupil for different states </h4>
+                        <h4 class="card-title">Product Engagement</h4>
                      </div>
-                      <div class="card-body align-items-center mx-auto mt-auto mb-auto">
-                        
-                        <div id="my_dataviz">
-
-                        </div>
+                      <div class="card-body">
+                      <div id="product_engagement"></div>
                       </div>
                     </div>
                   </div>
 
-                  <div class="col-sm-12 col-md-12 col-xl-6">
+
+                  <div class="col-sm-6 col-sm-12 col-md-12 col-xl-6">
                     <div class="card">
                       <div class="card-header ">
-                        <h4 class="card-title">Percentage of Locale in All States </h4>
+                        <h4 class="card-title"> Free Reduced and Percentage of Hispanic/Black </h4>
                      </div>
-                      <div class="card-body align-items-center mx-auto mt-auto mb-auto" >
-                        <div id="my_datadonutviz"></div>
-                        
+                      <div class="card-body" >
+                        <div id="free_reduced"></div>
+
                       </div>
                     </div>
                   </div>
 
-                  <div class="col-sm-6">
+                  <div class="col-sm-6 col-sm-12 col-md-12 col-xl-6">
                     <div class="card">
                         <div class="card-header ">
                           <h4 class="card-title">Graph of Percentage Access of Black/Hispanic in different States </h4>
                       </div>
-                      
-                        
-                      <div class="card-body align-items-center mx-auto mt-auto mb-auto" >
-                          <div id="my_lollipopviz"></div>
+
+
+                      <div class="card-body " >
+                          <div id="pct_ethnicity"></div>
                       </div>
-                            
+
                     </div>
                   </div>
 
-                  <div class="col-sm-6">
+            <div class="col-sm-6 col-sm-12 col-md-12 col-xl-6">
                     <div class="card">
                       <div class="card-header ">
-                        <h4 class="card-title">Graph of Percentage Access of Black/Hispanic in different States </h4>
+                        <h4 class="card-title">Least 10 Products with respect to Engagement Index </h4>
                      </div>
-                      <div class="card-body align-items-center mx-auto mt-auto mb-auto">
-                        <div id="my_databar"></div> 
+                      <div class="card-body">
+                      <div id="my_seconddatanewbar"></div>
                       </div>
                     </div>
                   </div>
 
-
                   <div class="col-sm-6 col-sm-12 col-md-12 col-xl-6 graphcard">
                     <div class="card">
                       <div class="card-header ">
@@ -372,7 +369,7 @@
                   </div>
 
 
-                  <div class="col-sm-6">
+                  <div class="col-sm-6 col-sm-12 col-md-12 col-xl-6">
                     <div class="card">
                       <div class="card-header ">
                         <h4 class="card-title">Average Expenditure per pupil for different states  </h4>
@@ -404,352 +401,7 @@
         <script>
           
 
-          var data = JSON.parse('{{ mydata | safe }}');
-          var margin = {top: 30, right: 30, bottom: 70, left: 60},
-          width =  650 - margin.left - margin.right,
-          height = 410 - margin.top - margin.bottom;
-
-          // append the svg object to the body of the page
-          var svg = d3.select("#my_dataviz")
-            .append("svg")
-              
-              .attr("width", width + margin.left + margin.right)
-              .attr("height", height + margin.top + margin.bottom)
-            .append("g")
-              .attr("transform",
-                    "translate(" + margin.left + "," + margin.top + ")");
-
-          // Parse the Data
-        
-          // X axis
-          var x = d3.scaleBand()
-            .range([ 0, width ])
-            .domain(data.map(function(d) { return d.state; }))
-            .padding(0.2);
-          svg.append("g")
-            .attr("transform", "translate(0," + height + ")")
-            .call(d3.axisBottom(x))
-            .selectAll("text")
-              .attr("transform", "translate(-10,0)rotate(-45)")
-              .style("text-anchor", "end");
-
-          // Add Y axis
-          var y = d3.scaleLinear()
-            .domain([0, 22000])
-            .range([ height, 0]);
-          svg.append("g")
-            .call(d3.axisLeft(y));
-
-          // Bars
-          svg.selectAll("mybar")
-            .data(data)
-            .enter()
-            .append("rect")
-              .attr("x", function(d) { return x(d.state); })
-              .attr("y", function(d) { return y(d.expenditure); })
-              .attr("width", x.bandwidth())
-              .attr("height", function(d) { return height - y(d.expenditure); })
-              .attr("fill", "royalblue")
-
 
-          //Donut graph
-          var widthofdonut = 700;
-          var heightofdonut = 410;
-          var marginfordonut = 5;
-          let s = JSON.parse('{{ suburb | safe }}');
-          let r = JSON.parse('{{ rural | safe }}');
-          let t = JSON.parse('{{ town | safe }}');
-          let c = JSON.parse('{{ city | safe }}');
-          console.log("value of suburb is", s)
-          console.log("value of rural is", r)
-          console.log("value of town is", t)
-          console.log("value of city is", c)
-          var radius = Math.min(widthofdonut, heightofdonut) / 2 - marginfordonut
-        
-
-            var svg1 = d3.select("#my_datadonutviz")
-              .append("svg")
-                .attr("width", widthofdonut)
-                .attr("height", heightofdonut)
-              .append("g")
-                .attr("transform", "translate(" + widthofdonut / 2 + "," + heightofdonut / 2 + ")");
-
-            
-            let datafordonut = {suburb: s, rural: r, town:t, city:c}
-
-            // set the color scale
-            var colordonut = d3.scaleOrdinal()
-              .domain(["suburb", "rural", "town", "city"])
-              .range(d3.schemeDark2);
-
-            // Compute the position of each group on the pie:
-            var pie = d3.pie()
-              .sort(null) // Do not sort group by size
-              .value(function(d) {return d.value; })
-            var data_ready = pie(d3.entries(datafordonut))
-
-            // The arc generator
-            var arc = d3.arc()
-              .innerRadius(radius * 0.5)         // This is the size of the donut hole
-              .outerRadius(radius * 0.8)
-              
-
-            // Another arc that won't be drawn. Just for labels positioning
-            var outerArc = d3.arc()
-              .innerRadius(radius * 0.9)
-              .outerRadius(radius * 0.9)
-
-            // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
-            svg1
-              .selectAll('allSlices')
-              .data(data_ready)
-              .enter()
-              .append('path')
-              .attr('d', arc)
-              .attr('fill', function(d){ return(colordonut(d.data.key)) })
-              .attr("stroke", "white")
-              .style("stroke-width", "2px")
-              .style("opacity", 0.7)
-
-            // Add the polylines between chart and labels:
-            svg1
-              .selectAll('allPolylines')
-              .data(data_ready)
-              .enter()
-              .append('polyline')
-                .attr("stroke", "black")
-                .style("fill", "none")
-                .attr("stroke-width", 1)
-                .attr('points', function(d) {
-                  var posA = arc.centroid(d) // line insertion in the slice
-                  var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that
-                  var posC = outerArc.centroid(d); // Label position = almost the same as posB
-                  var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left
-                  posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
-                  return [posA, posB, posC]
-                })
-
-            // Add the polylines between chart and labels:
-            svg1
-              .selectAll('allLabels')
-              .data(data_ready)
-              .enter()
-              .append('text')
-                .text( function(d) { console.log(d.data.key) ; return d.data.key + ":" + d.data.value } )
-                .attr('transform', function(d) {
-                    var pos = outerArc.centroid(d);
-                    var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
-                    pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);
-                    return 'translate(' + pos + ')';
-                
-                })
-                .style('text-anchor', function(d) {
-                    var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
-                    return (midangle < Math.PI ? 'start' : 'end')
-                })
-
-              
-              var data = JSON.parse('{{ mydata | safe }}');
-              var marginline = {top: 10, right: 30, bottom: 30, left: 60},
-              widthline = 700 - marginline.left - marginline.right,
-              heightline = 400 - marginline.top - marginline.bottom;
-// #my_lollipopviz
-
-              // append the svg object to the body of the page
-              var svg2 = d3.select("#my_lollipopviz")
-                .append("svg")
-                  .attr("width", widthline + marginline.left + marginline.right)
-                  .attr("height", heightline + marginline.top + marginline.bottom + 45)
-                .append("g")
-                  .attr("transform",
-                        "translate(" + marginline.left + "," + marginline.top + ")");
-
-              // Parse the Data
-              
-              // X axis
-              var x = d3.scaleBand()
-                .range([ 0, widthline ])
-                .domain(data.map(function(d) { return d.state; }))
-                .padding(1);
-              svg2.append("g")
-                .attr("transform", "translate(0," + heightline + ")")
-                .call(d3.axisBottom(x))
-                .selectAll("text")
-                  .attr("transform", "translate(-10,0)rotate(-45)")
-                  .style("text-anchor", "end")
-                  
-
-              // Add Y axis
-              var y = d3.scaleLinear()
-                .domain(d3.extent(data, d => d.expenditure))
-                .range([ heightline, 0]);
-              svg2.append("g")
-                .call(d3.axisLeft(y));
-
-              // Lines
-              svg2.selectAll("myline")
-                .data(data)
-                .enter()
-                .append("line")
-                  .attr("x1", function(d) { return x(d.state); })
-                  .attr("x2", function(d) { return x(d.state); })
-                  .attr("y1", function(d) { return y(d.expenditure); })
-                  .attr("y2", y(0))
-                  .attr("stroke", "grey")
-
-              // Circles
-              svg2.selectAll("mycircle")
-                .data(data)
-                .enter()
-                .append("circle")
-                  .attr("cx", function(d) { return x(d.state); })
-                  .attr("cy", function(d) { return y(d.expenditure); })
-                  .attr("r", "4")
-                  .style("fill", "#69b3a2")
-                  .attr("stroke", "black")
-              
-          
-                // horizontal bar graph
-                var data = JSON.parse('{{ top10 | safe }}');
-                var margin = {top: 20, right: 30, bottom: 40, left: 100},
-                width = 700 - margin.left - margin.right,
-                height = 400 - margin.top - margin.bottom;
-
-                // append the svg object to the body of the page
-                var svg3 = d3.select("#my_databar")
-                  .append("svg")
-                    .attr("width", width + margin.left + margin.right)
-                    .attr("height", height + margin.top + margin.bottom + 45)
-                  .append("g")
-                    .attr("transform",
-                          "translate(" + margin.left + "," + margin.top + ")");
-
-                
-                  // Add X axis
-                  var x = d3.scaleLinear()
-                    .domain([0, 1200])
-                    .range([ 0, width]);
-                  svg3.append("g")
-                    .attr("transform", "translate(0," + height + ")")
-                    .call(d3.axisBottom(x))
-                    .selectAll("text")
-                      .attr("transform", "translate(-10,0)rotate(-45)")
-                      .style("text-anchor", "end");
-
-                  // Y axis
-                  var y = d3.scaleBand()
-                    .range([ 0, height ])
-                    .domain(data.map(function(d) { return d.name; }))
-                    .padding(.1);
-                  svg3.append("g")
-                    .call(d3.axisLeft(y))
-
-                  //Bars
-                  svg3.selectAll("myRect")
-                    .data(data)
-                    .enter()
-                    .append("rect")
-                    .attr("x", x(0) )
-                    .attr("y", function(d) { return y(d.name); })
-                    .attr("width", function(d) { return x(d.avg); })
-                    .attr("height", y.bandwidth() )
-                    .attr("fill", "#69b3a2")
-
-                
-                //  // Line graph
-
-                // var margin = {top: 10, right: 30, bottom: 30, left: 60},
-                // width = 460 - margin.left - margin.right,
-                // height = 400 - margin.top - margin.bottom;
-
-                // // append the svg object to the body of the page
-                // var svg4 = d3.select("#my_datasimpleline")
-                //   .append("svg")
-                //     .attr("width", width + margin.left + margin.right)
-                //     .attr("height", height + margin.top + margin.bottom)
-                //   .append("g")
-                //     .attr("transform",
-                //           "translate(" + margin.left + "," + margin.top + ")");
-
-                // //Read the data
-                // d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv",
-
-                //   // When reading the csv, I must format variables:
-                //   function(d){
-                //     return { date : d3.timeParse("%Y-%m-%d")(d.date), value : d.value }
-                //   },
-
-                //   // Now I can use this dataset:
-                //   function(data) {
-
-                //     // Add X axis --> it is a date format
-                //     const month = ["January","February","March","April","May","June","July","August","September","October","November","December"];
-                //     var x = d3.scaleTime()
-                //       .domain(d3.extent(data, function(d) { return d.date; }))
-                      
-                //       .range([ 0, width ])
-                      
-
-                //     svg4.append("g")
-                //       .attr("transform", "translate(0," + height + ")")
-                //       .call(d3.axisBottom(x))
-                      
-
-                //     // Add Y axis
-                //     var y = d3.scaleLinear()
-                //       .domain([0, d3.max(data, function(d) { return +d.value; })])
-                //       .range([ height, 0 ]);
-                //     svg4.append("g")
-                //       .call(d3.axisLeft(y));
-
-                //     // Add the line
-                //     svg4.append("path")
-                //       .datum(data)
-                //       .attr("fill", "none")
-                //       .attr("stroke", "steelblue")
-                //       .attr("stroke-width", 1.5)
-                //       .attr("d", d3.line()
-                //         .x(function(d) { return x(d.date) })
-                //         .y(function(d) { return y(d.value) })
-                //         )
-
-                // }) 
-                
-                
-
-                
-              //   var options = {
-              //   series: [{
-              //     name: "Desktops",
-              //     data: [10, 41, 35, 51, 49, 62, 69, 91, 148, 1]
-              // }],
-              //   chart: {
-              //   height: 350,
-              //   type: 'line',
-              //   zoom: {
-              //     enabled: false
-              //   }
-              // },
-              // dataLabels: {
-              //   enabled: false
-              // },
-              // stroke: {
-              //   curve: 'straight'
-              // },
-              
-              // grid: {
-              //   row: {
-              //     colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns
-              //     opacity: 0.5
-              //   },
-              // },
-              // xaxis: {
-              //   categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct'],
-              // }
-              // };
-              
-              // {{ pro | safe }}
-              // JSON.parse('{{ mydata | safe }}');
               var e = {{ engo | safe }}
               var prod = {{ pro | safe }}
               
@@ -887,6 +539,174 @@
           var donutchart = new ApexCharts(document.querySelector("#my_datamydonutchart"), donutoptions);
           donutchart.render();
 
+          // This is the product engagement chart
+
+            var engagement = {{ engagement | safe}}
+            var time = {{ time | safe}}
+            var product_info = {{ product_info | safe}}
+
+
+          var options = {
+          series: [{
+            name: "Desktops",
+            data: engagement
+        }],
+          chart: {
+          height: 425,
+          type: 'line',
+          zoom: {
+            enabled: false
+          }
+        },
+        dataLabels: {
+          enabled: false
+        },
+        stroke: {
+          curve: 'straight'
+        },
+        title: {
+          text: ' Product Engagement trend for '+ product_info,
+          align: 'left'
+        },
+        grid: {
+          row: {
+            colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns
+            opacity: 0.5
+          },
+        },
+        xaxis: {
+          categories: time,
+        }
+        };
+
+        var chart = new ApexCharts(document.querySelector("#product_engagement"), options);
+        chart.render();
+
+      // This is the free reduced chart
+
+        var reduced_free = {{ reduced_free| safe}}
+        var pct = {{ pct_free| safe}}
+        var state = {{ multiple_state | safe}}
+
+
+        var options_2 = {
+          series: [{
+          name: 'Percentage of Black/Hispanic',
+          data: reduced_free,
+
+
+
+        }, {
+          name: 'Free Reduced',
+          data: pct
+
+        }],
+          chart: {
+          type: 'bar',
+          height: 430
+        },
+        plotOptions: {
+          bar: {
+            horizontal: false,
+            dataLabels: {
+              position: 'top',
+            },
+          }
+        },
+        dataLabels: {
+          enabled: true,
+          offsetX: -6,
+          style: {
+            fontSize: '12px',
+            colors: ['#fff']
+          }
+        },
+        stroke: {
+          show: true,
+          width: 1,
+          colors: ['#fff']
+        },
+        tooltip: {
+          shared: true,
+          intersect: false
+        },
+        xaxis: {
+          categories: state,
+        },
+        };
+
+        var chart = new ApexCharts(document.querySelector("#free_reduced"), options_2);
+        chart.render();
+
+
+
+        // Pct Black/Hispanic
+
+        var state = {{ state| safe}}
+        var pct_ethnic = {{ perc| safe}}
+
+         var pct_bar_options = {
+              series: [{
+              data: pct_ethnic,
+            }],
+              chart: {
+              type: 'bar',
+              height: 350
+            },
+            plotOptions: {
+              bar: {
+                borderRadius: 4,
+                horizontal: false,
+              }
+            },
+            dataLabels: {
+              enabled: false
+            },
+            xaxis: {
+              categories: state,
+            }
+
+            };
+
+
+            var barchart = new ApexCharts(document.querySelector("#pct_ethnicity"), pct_bar_options);
+            barchart.render();
+
+
+          // Least 10 products
+
+
+          var le = {{ leeng | safe }}
+              var lprod = {{ lepro | safe }}
+
+
+    var secondbaroptions = {
+              series: [{
+              data: le,
+            }],
+              chart: {
+              type: 'bar',
+              height: 350
+            },
+            plotOptions: {
+              bar: {
+                borderRadius: 4,
+                horizontal: false,
+              }
+            },
+            dataLabels: {
+              enabled: false
+            },
+            xaxis: {
+              categories: lprod,
+            }
+
+            };
+
+
+            var secondbarchart = new ApexCharts(document.querySelector("#my_seconddatanewbar"), secondbaroptions);
+            secondbarchart.render();
+
           </script>
                          
         
